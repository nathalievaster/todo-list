// DOM-hantering
import { Todo } from "./todo.model";
import { TodoList } from "./todo-list";

// Skapa ett nytt TodoList-objekt som hanterar data
const todoList = new TodoList();

// H√§mta referenser till HTML-element jag beh√∂ver arbeta med
const form = document.querySelector("#todoForm") as HTMLFormElement;
const taskInput = document.querySelector("#taskInput") as HTMLInputElement;
const priorityInput = document.querySelector("#priorityInput") as HTMLSelectElement;
const list = document.querySelector("#todoList") as HTMLUListElement;
const error = document.querySelector("#error") as HTMLParagraphElement;

// Funktion f√∂r att rendera todos i gr√§nssnittet
function renderTodos() {
  list.innerHTML = ""; // T√∂m listan f√∂rst

  const todos = todoList.getTodos(); // H√§mta alla todos fr√•n klassen

  todos.forEach((todo) => {
    const li = document.createElement("li"); // Skapa nytt <li>-element
    li.dataset.priority = todo.priority.toString(); // S√§tt prioritet som data-attribut
    li.className = todo.completed ? "completed" : ""; // L√§gg till klass om uppgiften √§r klar

    const label = document.createElement("label"); // Skapa en etikett f√∂r checkbox + text
    const checkbox = document.createElement("input"); // Skapa en checkbox
    checkbox.type = "checkbox";
    checkbox.checked = todo.completed; // Bocka i om uppgiften redan √§r klar

    // N√§r checkbox √§ndras (klickas i), markera todo som klar
    checkbox.addEventListener("change", () => {
      todoList.markTodoCompleted(todo.id); // Uppdatera datan i TodoList
      renderTodos(); // Rita om listan s√• f√∂r√§ndringen syns
    });

    // L√§gg checkbox och text i etiketten
    label.appendChild(checkbox);
    label.append(" " + todo.task);

    // Skapa <small>-element som visar n√§r uppgiften skapades
    const createdAt = document.createElement("small");
    createdAt.textContent = `Skapad: ${new Date(todo.createdAt).toLocaleString()}`;

    // Om uppgiften √§r klar, visa √§ven n√§r
    const completedAt = document.createElement("small");
    if (todo.completed && todo.completedAt) {
      completedAt.textContent = `Klar: ${new Date(todo.completedAt).toLocaleString()}`;
    }

    // Skapa knapp f√∂r borttagning
    const deleteBtn = document.createElement("button");
    deleteBtn.textContent = "üóëÔ∏è";
    deleteBtn.addEventListener("click", () => {
      if (confirm("Vill du ta bort uppgiften?")) {
        todoList.deleteTodo(todo.id);
        renderTodos();
      }
    });

    li.appendChild(label); // L√§gg etiketten i <li>
    li.appendChild(document.createElement("br"));
    li.appendChild(createdAt);
    if (todo.completedAt) {
      li.appendChild(document.createElement("br"));
      li.appendChild(completedAt);
    }
    li.appendChild(document.createElement("br"));
    li.appendChild(deleteBtn);

    list.appendChild(li); // L√§gg till <li> i todo-listan i DOM
  });
}

// N√§r anv√§ndaren klickar p√• "L√§gg till"
form.addEventListener("submit", (event) => {
  event.preventDefault(); // F√∂rhindra att sidan laddas om

  const task = taskInput.value; // H√§mta v√§rdet fr√•n inputf√§ltet
  const priority = Number(priorityInput.value); // Konvertera prioritet till ett nummer

  // F√∂rs√∂k l√§gga till todo via klassen
  const success = todoList.addTodo(task, priority);

  if (!success) {
    // Ogiltig inmatning ‚Üí visa felmeddelande
    error.textContent = "Fel: V√§nligen fyll i uppgiften och v√§lj en giltig prioritet (1‚Äì3).";
  } else {
    // Rensa felmeddelande, formul√§ret och rendera listan igen
    error.textContent = "";
    form.reset();
    renderTodos();
  }
});

// Rendera todos f√∂rsta g√•ngen sidan laddas
renderTodos();
